#!/system/bin/sh

trap 'stop_environment' EXIT INT TERM

# Mounts the chroot environment
start_environment()
{
    # Allows the use of setuid binaries
    if ! $BUSYBOX mount -o remount,suid /data; then
        echo "$0: Cannot remount /data with suid."
        exit 1
    fi

    # Links the standard streams to their file descriptor
    [ ! -e "/dev/fd" ] && ln -s /proc/self/fd /dev/
    [ ! -e "/dev/stdin" ] && ln -s /proc/self/fd/0 /dev/stdin
    [ ! -e "/dev/stdout" ] && ln -s /proc/self/fd/1 /dev/stdout
    [ ! -e "/dev/stderr" ] && ln -s /proc/self/fd/2 /dev/stderr

    # Copies the busybox binary
    if [ ! -f "$CHROOTMGR_ENV"/bin/busybox ]; then
        cp "$BUSYBOX" "$CHROOTMGR_ENV"/bin/busybox
        chmod 755 "$CHROOTMGR_ENV"/bin/busybox
    fi

    # Mounts the /proc filesystem
    mkdir -p "$CHROOTMGR_ENV"/proc
    ! $BUSYBOX mountpoint -q "$CHROOTMGR_ENV"/proc && $BUSYBOX mount -t proc /proc "$CHROOTMGR_ENV"/proc

    # Mounts the /dev filesystem (overlayed)
    mkdir -p "$CHROOTMGR_ENV"/dev
    mkdir -p "$CHROOTMGR_ENV"/mnt/dev-upper "$CHROOTMGR_ENV"/mnt/dev-work
    chmod 700 "$CHROOTMGR_ENV"/mnt/dev-upper "$CHROOTMGR_ENV"/mnt/dev-work
    ! $BUSYBOX mountpoint -q "$CHROOTMGR_ENV"/mnt/dev-upper && $BUSYBOX mount -t tmpfs tmpfs "$CHROOTMGR_ENV"/mnt/dev-upper
    if ! $BUSYBOX mount -t overlay overlay \
            -o lowerdir=/dev,upperdir="$CHROOTMGR_ENV"/mnt/dev-upper,workdir="$CHROOTMGR_ENV"/mnt/dev-work \
            "$CHROOTMGR_ENV"/dev 2>/dev/null; then
        echo "$0: Overlay failed, falling back to bind-mount for /dev."
        $BUSYBOX mount --bind /dev "$CHROOTMGR_ENV"/dev

        # Cleans the unused tmpfs
        $BUSYBOX umount "$CHROOTMGR_ENV"/mnt/dev-upper
        rm -rf "$CHROOTMGR_ENV"/mnt/dev-upper "$CHROOTMGR_ENV"/mnt/dev-work
    fi

    # Mounts the /dev/pts filesystem
    ! $BUSYBOX mountpoint -q "$CHROOTMGR_ENV"/dev/pts && $BUSYBOX mount -t devpts devpts "$CHROOTMGR_ENV"/dev/pts

    # Mounts the /dev/shm filesystem
    mkdir -p "$CHROOTMGR_ENV"/dev/shm
    ! $BUSYBOX mountpoint -q "$CHROOTMGR_ENV"/dev/shm && $BUSYBOX mount -o rw,nosuid,nodev,mode=1777 -t tmpfs tmpfs "$CHROOTMGR_ENV"/dev/shm

    # Mounts the /sdcard filesystem
    mkdir -p "$CHROOTMGR_ENV"/sdcard
    ! $BUSYBOX mountpoint -q "$CHROOTMGR_ENV"/sdcard && $BUSYBOX mount -t sdcardfs /sdcard "$CHROOTMGR_ENV"/sdcard

    # Mounts the /sys filesystem
    mkdir -p "$CHROOTMGR_ENV"/sys
    ! $BUSYBOX mountpoint -q "$CHROOTMGR_ENV"/sys && $BUSYBOX mount -t sysfs /sys "$CHROOTMGR_ENV"/sys

    # Mounts the /system filesystem
    mkdir -p "$CHROOTMGR_ENV"/system
    ! $BUSYBOX mountpoint -q "$CHROOTMGR_ENV"/system && $BUSYBOX mount /system "$CHROOTMGR_ENV"/system
    $BUSYBOX mount -o remount,ro "$CHROOTMGR_ENV"/system

    # Mounts the /run filesystem
    mkdir -p "$CHROOTMGR_ENV"/run
    ! $BUSYBOX mountpoint -q "$CHROOTMGR_ENV"/run && $BUSYBOX mount -o rw,nosuid,nodev,mode=755 -t tmpfs tmpfs "$CHROOTMGR_ENV"/run
    mkdir -p "$CHROOTMGR_ENV"/run/user/0
    chmod 700 "$CHROOTMGR_ENV"/run/user/0

    # Mounts the /tmp filesystem
    mkdir -p "$CHROOTMGR_ENV"/tmp
    ! $BUSYBOX mountpoint -q "$CHROOTMGR_ENV"/tmp && $BUSYBOX mount -t tmpfs -o mode=1777,size=64M tmpfs "$CHROOTMGR_ENV"/tmp

    # Mounts the /var filesystem
    mkdir -p "$CHROOTMGR_ENV"/var
    ! $BUSYBOX mountpoint -q "$CHROOTMGR_ENV"/var && $BUSYBOX mount -t tmpfs tmpfs "$CHROOTMGR_ENV"/var
    mkdir -p "$CHROOTMGR_ENV"/var/log "$CHROOTMGR_ENV"/var/run "$CHROOTMGR_ENV"/var/tmp

    # Creates the /etc/resolv.conf file
    true > "$CHROOTMGR_ENV"/etc/resolv.conf
    for server in 1 2 3 4; do
        [ -z "$(getprop net.dns$server)" ] && break
        echo "nameserver $(getprop net.dns$server)" >> "$CHROOTMGR_ENV"/etc/resolv.conf
    done

    # Creates the /etc/hosts file
    true > "$CHROOTMGR_ENV"/etc/hosts
    echo "127.0.0.1     localhost $CHROOTMGR_HNAME" >> "$CHROOTMGR_ENV"/etc/hosts
    echo "::1           localhost ip6-localhost ip6-loopback" >> "$CHROOTMGR_ENV"/etc/hosts
    $BUSYBOX hostname "$CHROOTMGR_HNAME"

    # Sets the appropriate environment variables
    export TMPDIR=/tmp
    export PATH=/usr/bin:/usr/sbin:/bin:/usr/local/bin:/usr/local/sbin:/system/bin:"$PATH"
}

# Unmounts the chroot environment
stop_environment()
{
    # Disallows the use of suid binaries
    $BUSYBOX mount -o remount,nosuid /data

    # Unmounts previously mounted filesystems
    for mount_point in var tmp system sys sdcard mnt/dev-upper dev/pts dev/shm dev proc; do
        if $BUSYBOX mountpoint -q "$CHROOTMGR_ENV"/$mount_point; then
            $BUSYBOX umount "$CHROOTMGR_ENV"/${mount_point} 2>/dev/null || $BUSYBOX umount -l "$CHROOTMGR_ENV"/${mount_point} 2>/dev/null
        fi
    done
}

# Prints HELP Usage
if [ $# -eq 0 ]; then
    echo "$0: A lightweight utility to create safe, isolated chroot environments."
    echo "Usage: $0 <environment> <command> <command-args>"
    exit
fi

# Checks for a matching architecture
ARCH=$(uname -m)
if [ "$ARCH" != "aarch64" ]; then
    echo "$0: Unsupported architecture: $ARCH."
    echo "This script only works on aarch64."
    exit 1
fi

# Check if the user has root permissions 
if [ "$(id -u)" -ne 0 ]; then
    echo "$0: Missing required super-user permisions."
    exit 1
fi

# Checks if the systems has overlay support
if ! grep -q overlay /proc/filesystems 2>/dev/null; then
    echo "$0: Missing overlay support, falling back to bind-mount for /dev."
fi

# Checks for popular busybox install locations
if [ -z "$BUSYBOX" ]; then
    if [ -x /sbin/busybox ]; then
        BUSYBOX=/sbin/busybox
    elif [ -x /system/bin/busybox ]; then
        BUSYBOX=/system/bin/busybox
    elif [ -x /system/xbin/busybox ]; then
        BUSYBOX=/system/xbin/busybox
    elif [ -x /data/local/bin/busybox ]; then
        BUSYBOX=/data/local/bin/busybox
    else
        echo "$0: Cannot locate the busybox binary."
        echo "Manually set it using the $BUSYBOX variable."
        exit 1
    fi
fi

# Configures parameters
CHROOTMGR_ENV=$1
shift
CHROOTMGR_EXEC=$@
CHROOTMGR_HNAME="$(basename "$CHROOTMGR_ENV")"

# Defines the default chroot command
if [ -z "$CHROOTMGR_EXEC" ]; then
    CHROOTMGR_EXEC="/bin/su"
fi

echo "$0: Creating an isolated namespace, type \"exit\" in the current shell."
if ! $BUSYBOX unshare --mount || ! $BUSYBOX mount --make-rprivate /; then
    echo "$0: Failed to create a private mountpoint."
    exit 1
fi

echo "$0: Starting environment: \"$CHROOTMGR_ENV\""
start_environment

echo "$0: Running chroot command: \"$CHROOTMGR_EXEC\""
$BUSYBOX chroot "$CHROOTMGR_ENV" $CHROOTMGR_EXEC
eval "$BUSYBOX resize" 2>/dev/null

echo "$0: Stopping environment: \"$CHROOTMGR_ENV\""
stop_environment